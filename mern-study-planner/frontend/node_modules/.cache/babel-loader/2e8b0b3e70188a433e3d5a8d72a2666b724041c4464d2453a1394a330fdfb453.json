{"ast":null,"code":"var _jsxFileName = \"/workspaces/Team-Project/mern-study-planner/frontend/src/components/CalenderView.js\",\n  _s = $RefreshSig$();\nimport { Paper, Dialog, DialogActions, DialogContent, DialogTitle, Button } from \"@mui/material\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CalendarView = ({\n  data\n}) => {\n  _s();\n  // State for managing dialog visibility and selected event details\n  const [openDialog, setOpenDialog] = useState(false);\n  const [selectedEvent, setSelectedEvent] = useState(null);\n\n  // Format task data to be used by FullCalendar\n  const events = data.map(task => ({\n    title: task.title,\n    start: task.end_date,\n    // Use task's deadline as start date\n    end: task.end_date,\n    // Same as start for a single-day event\n    extendedProps: {\n      // Store additional task data in extendedProps\n      completion: task.percent_complete\n    }\n  }));\n\n  // Handler for event click\n  const handleEventClick = info => {\n    setSelectedEvent(info.event); // Set the clicked event details\n    setOpenDialog(true); // Open the dialog\n  };\n\n  // Close dialog\n  const handleCloseDialog = () => {\n    setOpenDialog(false); // Close the dialog\n  };\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(FullCalendar, {\n        plugins: [dayGridPlugin],\n        initialView: \"dayGridMonth\",\n        events: events,\n        weekends: true,\n        eventColor: \"red\" // This will make all events red\n        ,\n        eventClick: handleEventClick // Show dialog when clicking an event\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: openDialog,\n      onClose: handleCloseDialog,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: selectedEvent === null || selectedEvent === void 0 ? void 0 : selectedEvent.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Completion: \", selectedEvent === null || selectedEvent === void 0 ? void 0 : selectedEvent.extendedProps.completion, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Start Date: \", selectedEvent === null || selectedEvent === void 0 ? void 0 : selectedEvent.start.toString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"End Date: \", selectedEvent === null || selectedEvent === void 0 ? void 0 : selectedEvent.end.toString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleCloseDialog,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(CalendarView, \"YWMFbZUAWpdAY/N8J5hVbqWTnHA=\");\n_c = CalendarView;\nexport default CalendarView;\nvar _c;\n$RefreshReg$(_c, \"CalendarView\");","map":{"version":3,"names":["Paper","Dialog","DialogActions","DialogContent","DialogTitle","Button","FullCalendar","dayGridPlugin","useState","jsxDEV","_jsxDEV","CalendarView","data","_s","openDialog","setOpenDialog","selectedEvent","setSelectedEvent","events","map","task","title","start","end_date","end","extendedProps","completion","percent_complete","handleEventClick","info","event","handleCloseDialog","children","plugins","initialView","weekends","eventColor","eventClick","fileName","_jsxFileName","lineNumber","columnNumber","open","onClose","toString","onClick","_c","$RefreshReg$"],"sources":["/workspaces/Team-Project/mern-study-planner/frontend/src/components/CalenderView.js"],"sourcesContent":["import { Paper, Dialog, DialogActions, DialogContent, DialogTitle, Button } from \"@mui/material\";\nimport FullCalendar from \"@fullcalendar/react\"; \nimport dayGridPlugin from \"@fullcalendar/daygrid\"; \nimport { useState } from \"react\";\n\nconst CalendarView = ({ data }) => {\n  // State for managing dialog visibility and selected event details\n  const [openDialog, setOpenDialog] = useState(false);\n  const [selectedEvent, setSelectedEvent] = useState(null);\n\n  // Format task data to be used by FullCalendar\n  const events = data.map((task) => ({\n    title: task.title,\n    start: task.end_date,  // Use task's deadline as start date\n    end: task.end_date,    // Same as start for a single-day event\n    extendedProps: {       // Store additional task data in extendedProps\n      completion: task.percent_complete,\n    },\n  }));\n\n  // Handler for event click\n  const handleEventClick = (info) => {\n    setSelectedEvent(info.event);  // Set the clicked event details\n    setOpenDialog(true);  // Open the dialog\n  };\n\n  // Close dialog\n  const handleCloseDialog = () => {\n    setOpenDialog(false);  // Close the dialog\n  };\n\n  return (\n    <Paper>\n      <div>\n        {/* FullCalendar component */}\n        <FullCalendar\n          plugins={[dayGridPlugin]}\n          initialView=\"dayGridMonth\"\n          events={events}\n          weekends={true}\n          eventColor=\"red\"  // This will make all events red\n          eventClick={handleEventClick}  // Show dialog when clicking an event\n        />\n      </div>\n\n      {/* Dialog to display event details */}\n      <Dialog open={openDialog} onClose={handleCloseDialog}>\n        <DialogTitle>{selectedEvent?.title}</DialogTitle>\n        <DialogContent>\n          <p>Completion: {selectedEvent?.extendedProps.completion}%</p>\n          <p>Start Date: {selectedEvent?.start.toString()}</p>\n          <p>End Date: {selectedEvent?.end.toString()}</p>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCloseDialog}>Close</Button>\n        </DialogActions>\n      </Dialog>\n    </Paper>\n  );\n};\n\nexport default CalendarView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}